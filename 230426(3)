#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

// 배열(array)
// 배열은 같은 타입의 변수들로 이루어진 유한 집합
// 배열을 구성하는 각각의 값을 배열 요소라 한다.
// 배열에서 위치를 가르키는 숫자는 인덱스 라고 한다.
// 항상 인덱스는 0에서 시작하며 0을 포함안 양의 정수만을 가질 수 있다.


// int arr[3]; --> 배열 선언 방법, 배열의 크기는 0보다 커야 한다.


//int size = 100;
//double data[size];// 배열은 변수 지정 불가

#define MAX 5 // 하지만 메크로 상수 지정은 가능하다
int arr[MAX]; 

// 배열 코딩
int main() {
	int arr[5]; //크기가 5인 배열 생성(정수형)
	int byte_size = 0; //배열의 바잍 크기를 저장할 변수
	int size = 0;		// 배열의 크기를 저장할 변 수
	int i;
	byte_size = sizeof(arr); //배열의 바이트 크기
	printf("배열의 바이트 크기 : %d\n\n", byte_size);
	size = siziof(arr) / sizeof(arr[0]);
	printf("배열의 크기  : %d\n", size);
	for (i = 0; i < size; i++) {
		arr[i] = 0;

	}
	return 0;
}

//메크로 상수로 이용한 배열

#define ARR_SIZE 5
int main() {
	int arr[ARR_SIZE];
	int i;
	for (i = 0; i < ARR_SIZE; i++)
	{
		arr[i] = 0;
	}
	printf("arr배열의 원소:");

	for (i = 0; i < ARR_SIZE; i++)
	{
		printf("%d", arr[i]);
	}
	printf("\n");
	return 0;
}

// 배열 코딩

#define ARR_SIZE 5
int add(int a, int b) { return a + b; }

int main() {
	int arr[ARR_SIZE] = { 0 };
	int i;
	arr[0] = 5;
	arr[1] = arr[0] + 10; //배열의 요소(원소)를 수식에 이용
	arr[2] = add(arr[0], arr[1]); // 함수의 인자로 사용
	printf("정수를 2개 입력 하시오 : ");
	scanf("%d %d", &arr[3], &arr[4]);
	for (i = 0; i < ARR_SIZE; i++)
	{
		printf("%d", arr[i]);

	}

	printf("\n");
	return 0;

}

#define ARR_SIZE 5

int main() {
	int arr[ARR_SIZE] = { 10, 20, 30, 40, 50 };
	int i;
	printf("arr= ");
	for (i = 0; i < ARR_SIZE; i++)
	{
		printf("%d ", arr[i]);
	}

	printf("\n");
	printf("arr[5] = %d \n", arr[5]);
	return 0;
}


int main() //배열의 초기화는 단 한번 처음 선언 시 한번에 모든 칸 초기화 가능, 배열의 크키보다 많은 변수를 지정 시 컴파일 오류가 난다.
{
	int arr[4] = { 1,2,3 };
  
	arr[0] = 3;
	arr[1] = 5;
	arr[2] = 7;
	arr[3] = 9;

	printf("arr 배열의 첫번째 요소 주소값 : %p\t 요소값: %d \n",&arr[0],arr[0]);
	printf("arr 배열의 첫번째 요소 주소값 : %p\t 요소값: %d \n",&arr[1],arr[1]);
	printf("arr 배열의 첫번째 요소 주소값 : %p\t 요소값: %d \n",&arr[2],arr[2]);
	printf("arr 배열의 첫번째 요소 주소값 : %p\t 요소값: %d \n",&arr[3],arr[3]);

	return 0;


}


//배열의 크기보기
int main() {
	int arr[5] = { 2,3,4,5,6 };
	int brr[] = { 2 ,4 ,8 };
	printf("int형 크기 : %d byte\n", sizeof(int));
	printf("배열 arr의 크기 : %d byte\n", sizeof(arr));
	printf("배열 brr형의  크기 : %d byte\n", sizeof(brr));
	return 0;
}


// 배열의 탐색

int main() {
	int data[] = { 78,52,63,58,77,52,88};
	int size;
	int key, i;
	size = sizeof(data) / sizeof(data[0]);
	printf("arr = ");
	for (i = 0; i < size; i++)
	{
		printf("%d    ", data[i]);
	}
	printf("    \n");
	printf("찾을 값은? : ");
	scanf("%d", &key);

	for (i = 0; i < size; i++)
	{
		if (data[i] == key)
		{
			printf("찾은 원소의 인덱스 : %d\n", i);
		}
	}return 0;
}


// 배열의 탐색

int main() {
	int data[] = { 78,52,63,58,77,52,88 };
	int size;
	int key, i, found = 0;
	size = sizeof(data) / sizeof(data[0]);
	printf("arr = ");
	for (i = 0; i < size; i++)
	{
		printf("%d    ", data[i]);
	}
	printf("    \n");
	printf("찾을 값은? : ");
	scanf("%d", &key);

	for (i = 0; i < size; i++)
	{
		if (data[i] == key)
		{
			printf("찾은 원소의 인덱스 : %d\n", i);
			found = 1;
		}
		
	}

	if (!found)
	{
		printf("찾을 원소가 없습니다\n");
	}
	return 0;
}

// 배열내의 원하는 글자 찾기
#define MAX 30

int main() {
	char sentence[MAX] = { 0 };
	char key;
	int i;
	printf("30자 이하의 문장을 입력하시오.");
	for (i = 0; i < MAX; i++)
	{
		scanf("%c", &sentence[i]);
		if (sentence[i] == '\n')  //엔터키가 들어온다면
		{
			sentence[i] = '\0';
			break;
		}

	}
	printf("찾을 문자를 입력하시오 :");
	scanf("%c", &key);
	for (i = 0; i < MAX; i++)
	{
		if (sentence[i]==key)
		{
			printf("%d번째 칸에서 찾았습니다\n", i + 1);
		}

	}

	return 0;


//배열을 이용해서 진법 변환 10진수를 2진수로 바꾸기

int main() {
	int decimal;
	int binary[20] = { 0, };
	int position = 0;
	printf("2진수로 변환할 10진수를 입력하세요");
	scanf("%d", &decimal);
	while (1)
	{
		binary[position] = decimal % 2; // 나머지를 배열에 저장하기
		decimal = decimal / 2;			// 몫을 저장
		position++;

		if(decimal == 0)
		{
			break;
		}
	}
	// 배열을 역순으로 출력
	for (int i = position - 1; i >= 0 ; i--)
	{
		printf("%d", binary[i]);
	}
	printf("\n");
	return 0;
}

// 배열 구조
int main(){
	int arr_2[3][3] = {{1,4,6},{8,5,2},{7,9,3}};
	printf(" 1행 1열 : %d | ", arr_2[0][0]);
	printf(" 1행 2열 : %d | ", arr_2[0][1]);
	printf(" 1행 3열 : %d | \n", arr_2[0][2]);
	printf(" 2행 1열 : %d | ", arr_2[0][0]);
	printf(" 2행 2열 : %d | ", arr_2[0][1]);
	printf(" 2행 3열 : %d | \n", arr_2[0][2]);
	printf(" 3행 1열 : %d | ", arr_2[0][0]);
	printf(" 3행 2열 : %d | ", arr_2[0][1]);
	printf(" 3행 3열 : %d | \n", arr_2[0][2]);
	return 0;
	}


// 위의 코드를 For문 중첩을 이용하여 동일한 출력을 나오게 하는 코드

int main(){
	int arr_2[3][3] = { {1,4,6},{8,5,2},{7,9,3}};
	int i, j;
	for ( i = 0; i < 3; i++)			// 행
	{	
		for (j = 0; j < 3; j++)			// 열
		{			
			printf("%d행 %d열 : %d", i, j, arr_2[i][j]);
			if (j < 3)printf("|");
			if (j == 2)printf("\n");
		}
	}
	return 0;
	}


// 2차원 배열

int main() {
	int arr_2[3][3] = { {1,4,6},{8,5,2},{7,9,3} };
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for(j = 0; j < 3; j++)
		{	
			printf("%d행 %d열 : %d | 주소 : %p\n", i, j, arr_2[i][j],&arr_2[i][j]);
		}
		
	}
	return 0;
}


//2차원 배열에서 선언할때 행의 수 비워둘 수 있다.(단, 열은 안됨)

int main() {
	int arr_2[2][3] = { {1,4},{8,5,2} };
	int i, j;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			printf("%d행 %d열 : %d\n", i, j, arr_2[i][j]);
		}

	}
	return 0;
}


// 행과 열의 합 구하기
#define ROW 3
#define COL 3
int main() {
	int square[ROW + 1][COL + 1] = { 0 };
	int i, j;
	printf("한줄에 3개의 정수를 3번 입력하세요\n");
	for ( i = 0; i < ROW; i++)	// 입력
	{
		for ( j = 0; j < COL ; j++)
		{	
			scanf("%d", &square[i][j]);
		}
		for ( j = 0; j < COL; j++)
		{
			square[i][COL] += square[i][j];
			if (i < ROW)
			{
				square[ROW][j] +=square[i][j];
			}
		}
		8
	}
	for (i = 0; i < ROW + 1; i++) // 출력
	{
		for (j = 0; j < COL+1; j++)
		{
			printf("%5d", square[i][j]);
		}
		printf("\n");
	}
	return 0;
}



